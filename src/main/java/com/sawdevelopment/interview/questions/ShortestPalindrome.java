package com.sawdevelopment.interview.questions;

/**
 * Given a string, find the shortest possible palindrome of the given string that can be generated by pre-pending characters
 * The given string MUST be the tail of the palindrome in the given order. Return null if no palindrome can be found.
 *
 * @author Scott Weber
 */
class ShortestPalindrome {

  String shortestPalindromeRecursive(String s) {
    if (s == null) {
      return null;
    }

    int i = 0;
    int j = s.length() - 1;

    while (j >= 0) {
      if (s.charAt(i) == s.charAt(j)) {
        i++;
      }
      j--;
    }

    if (i == s.length()) {
      return s;
    }

    String suffix = s.substring(i);
    String prefix = new StringBuilder(suffix).reverse().toString();
    String mid = shortestPalindromeRecursive(s.substring(0, i));
    return prefix+mid+suffix;
  }

  String shortestPalindromeIterative(String s) {
    if(s == null) {
      return null;
    }

    int lengthOfSuccessfulOverlap = 0;
    String rev = new StringBuilder(s).reverse().toString();
    int lengthOfString = s.length();
    for(int i = 0; i < lengthOfString; ++i) {
      String head = s.substring(0, i);
      String tail = rev.substring(lengthOfString - (i + 1), lengthOfString - 1);
      if(head.equals(tail)) {
        lengthOfSuccessfulOverlap = i;
      }
    }
    StringBuilder shortestSub = new StringBuilder(s).replace(0, lengthOfSuccessfulOverlap + 1, "");
    return rev + shortestSub.toString();
  }

  String shortestPalindromeBrie(String pal) {
    if(pal != null) {
      StringBuilder sb = new StringBuilder();
      if(!isPal(pal)) {
        char[] c = pal.toCharArray();
        for (int i = pal.length() - 1; i > 0; --i) {
          if(isPal(sb.toString() + pal)) {
            return sb.toString() + pal;
          }
          sb.append(c[i]);
        }
      }
      sb.append(pal);
      return sb.toString();
    } else {
      return null;
    }
  }

  private boolean isPal(String p) {
    StringBuilder sb = new StringBuilder();
    sb.append(p);

    return p.equals(sb.reverse().toString());
  }
}
